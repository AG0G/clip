<!DOCTYPE html> <html lang="en"> <head>     <meta charset="UTF-8">     <meta name="viewport" content="width=device-width, initial-scale=1.0">     <title>Online Clipboard</title>     <style>         body {             font-family: 'Arial', sans-serif;             background-color: #e9ecef;             color: #343a40;             margin: 0;             padding: 50px;             display: flex;             flex-direction: column;             align-items: center;             height: 100vh;             justify-content: center;         }         h1 {             color: #007bff;             margin-bottom: 30px;             font-size: 2.5em;             text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);         }         form {             background: white;             padding: 30px;             border-radius: 12px;             box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);             width: 350px;             display: flex;             flex-direction: column;             transition: transform 0.3s;         }         form:hover {             transform: scale(1.02);         }         input[type="text"] {             margin-bottom: 20px;             padding: 12px;             border: 1px solid #ced4da;             border-radius: 6px;             font-size: 16px;             transition: border-color 0.3s;         }         input[type="text"]:focus {             border-color: #007bff;             outline: none;         }         button {             padding: 12px;             background-color: #007bff;             color: white;             border: none;             border-radius: 6px;             font-size: 16px;             cursor: pointer;             transition: background-color 0.3s, transform 0.2s;         }         button:hover {             background-color: #0056b3;             transform: translateY(-1px);         }         button:active {             transform: translateY(0);         }         #errorMessage {             color: red;             margin-top: 15px;             display: none;             font-weight: bold;             padding: 10px;             border: 1px solid red;             border-radius: 5px;             background-color: #f8d7da;             width: 100%;             text-align: center;         }         .toggle-container {             margin-bottom: 20px;         }         #timer {             color: #28a745;             font-weight: bold;             margin-top: 10px;             display: none;         }         #fetchedData {             margin-top: 20px;             padding: 15px;             border: 1px solid #007bff;             border-radius: 6px;             background-color: #f1f8ff;             display: none;             width: auto; /* Allow auto width */             max-width: 90vw; /* Responsive to screen size */             overflow-wrap: break-word; /* Wrap text if too long */             white-space: pre-wrap; /* Preserve whitespace */         }         #copyButton {             margin-top: 10px;             display: none;         }     </style> </head> <body>     <h1>Online Clipboard</h1>     <div class="toggle-container">         <button id="toggleButton" type="button">Switch to View</button>     </div>     <form id="dataForm">         <input type="text" id="userInput" placeholder="Enter values separated by commas" style="display: block;">         <input type="text" id="uniqueCode" placeholder="Enter unique code (5 digits)" style="display: none;">         <button type="submit" id="submitButton">Send</button>         <div id="errorMessage"></div>         <div id="timer"></div>     </form>     <div id="fetchedData"></div>     <button id="copyButton">Copy Data</button>      <script>         const apiToken = 'ghp_c6RQI7T87jRb1KAAihAoM0UjbgYoIw2QKot'; // Your base API token         let isViewMode = false;         let buttonDisabled = false;          // Set default to Send mode         updateForm();          document.getElementById('toggleButton').onclick = function() {             isViewMode = !isViewMode;             updateForm();         };          function updateForm() {             const userInput = document.getElementById('userInput');             const uniqueCode = document.getElementById('uniqueCode');             const submitButton = document.getElementById('submitButton');             const toggleButton = document.getElementById('toggleButton');             const errorMessageDiv = document.getElementById('errorMessage');             const fetchedDataDiv = document.getElementById('fetchedData');             const copyButton = document.getElementById('copyButton');              if (isViewMode) {                 userInput.style.display = 'none'; // Hide input for data submission                 uniqueCode.style.display = 'block'; // Show unique code input                 submitButton.textContent = "View";                 toggleButton.textContent = "Switch to Send";                 fetchedDataDiv.style.display = 'none'; // Hide fetched data on switch                 copyButton.style.display = 'none'; // Hide copy button                 errorMessageDiv.style.display = 'none'; // Hide error message when switching             } else {                 userInput.style.display = 'block'; // Show input for data submission                 uniqueCode.style.display = 'none'; // Hide unique code input                 submitButton.textContent = "Send";                 toggleButton.textContent = "Switch to View";                 errorMessageDiv.style.display = 'none'; // Clear error message when switching             }         }          document.getElementById('dataForm').onsubmit = async function(event) {             event.preventDefault();             if (buttonDisabled) return; // Prevent further clicks if disabled              const userInput = document.getElementById('userInput').value;             const uniqueCode = document.getElementById('uniqueCode').value;             const submitButton = document.getElementById('submitButton');             const errorMessageDiv = document.getElementById('errorMessage');             const timerDiv = document.getElementById('timer');             const fetchedDataDiv = document.getElementById('fetchedData');             const copyButton = document.getElementById('copyButton');              // Get the token from the URL query parameter             const urlParams = new URLSearchParams(window.location.search);             const additionalToken = urlParams.get('token');              // Check if additional token is provided             if (!additionalToken) {                 showError('Unauthorized: Please provide a valid token in the URL.');                 return; // Stop the submission             }              // Concatenate the base API token with the additional token             const finalToken = `${apiToken}${additionalToken}`;             const dataArray = userInput.split(', ').map(item => item.trim()).filter(Boolean);             const finalData = dataArray.length === 1 ? dataArray[0] : dataArray.join(', '); // Join array into a string              // Encode the data to be sent             const encodedData = btoa(finalData); // Base64 encode              // Generate a random five-digit number for sending             const randomCode = Math.floor(10000 + Math.random() * 90000).toString();              // Disable the submit button and start the timer             buttonDisabled = true;             submitButton.disabled = true;             timerDiv.style.display = 'block';              let countdown = 5;             const countdownInterval = setInterval(() => {                 timerDiv.textContent = `Please wait for ${countdown} seconds before submitting another request...`;                 countdown--;                 if (countdown < 0) {                     clearInterval(countdownInterval);                     submitButton.disabled = false;                     buttonDisabled = false;                     timerDiv.style.display = 'none';                     errorMessageDiv.style.display = 'none'; // Clear error message when timer ends                 }             }, 1000);              let response;             if (isViewMode) {                 // Use the unique code provided by the user to view the file in the bin directory                 const fileName = `bin/${uniqueCode}.txt`;                 response = await fetch(`https://api.github.com/repos/ag0g/snap/contents/${fileName}?_=${new Date().getTime()}`, {                     method: 'GET', headers: {                         'Authorization': `token ${finalToken}`, 'Accept': 'application/vnd.github.v3.raw'                     }                 });             } else {                 // Send encoded data to the specified file in the bin directory                 response = await fetch('https://api.github.com/repos/ag0g/snap/dispatches', {                     method: 'POST', headers: {                         'Authorization': `token ${finalToken}`, 'Accept': 'application/vnd.github.v3+json', 'Content-Type': 'application/json', }, body: JSON.stringify({                         event_type: 'updateData', client_payload: {                             filename: `bin/${randomCode}.txt`, // Use random code in bin directory                             data: encodedData // Encoded data to be written to the specified file                         }                     })                 });             }              // Check response after API call             if (response && response.ok) {                 if (isViewMode) {                     const data = await response.text(); // Get raw text for fetched data                     const decodedData = atob(data); // Decode fetched data                     fetchedDataDiv.textContent = 'Fetched Data: ' + decodedData;                     fetchedDataDiv.style.display = 'block';                     fetchedDataDiv.style.width = 'auto'; // Allow the width to adjust                     fetchedDataDiv.style.maxWidth = '90vw'; // Responsive to screen size                     copyButton.style.display = 'block'; // Show copy button                 } else {                     alert(`Your unique code to access your data is: ${randomCode}`);                     errorMessageDiv.style.display = 'none'; // Hide error message if any                 }             } else if (response) {                 const errorText = await response.text();                 // Improved error handling                 if (isViewMode) {                     if (errorText.includes("404")) {                         showError('Error viewing data: File does not exist');                     } else if (errorText.includes("401")) {                         showError('Error sending/viewing: Wrong password or token');                     } else {                         showError('An unknown error occurred: ' + errorText);                     }                 } else {                     showError('Failed to submit data: ' + errorText);                 }             }         };          function showError(message) {             const errorMessageDiv = document.getElementById('errorMessage');             errorMessageDiv.textContent = message;             errorMessageDiv.style.display = 'block';         }          document.getElementById('copyButton').onclick = function() {             const fetchedDataDiv = document.getElementById('fetchedData');             const textToCopy = fetchedDataDiv.textContent.replace('Fetched Data: ', ''); // Extract the actual data              navigator.clipboard.writeText(textToCopy)                 .then(() => {                     alert('Data copied to clipboard!');                 })                 .catch(err => {                     console.error('Error copying data: ', err);                 });         };     </script> </body> </html>
